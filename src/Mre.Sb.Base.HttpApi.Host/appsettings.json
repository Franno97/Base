{
  "App": {
    "CorsOrigins": "http://localhost:4200,http://localhost:4300,http://172.31.3.18:80,http://172.31.3.18,http://172.31.3.19:80,http://172.31.3.19"
  },
  "Auditoria": {
    //Nombre de la aplicacion o microservicio que se registra como un campo en los registros de auditoria
    "AplicacionNombre": "Base",
    //Codigo de categoria para obtener la configuracion de auditoria
    "ConfiguracionCategoriaCodigo": "BAPI",
    //Tiempo cache para la configuracion auditoria. (Segundos)
    "CacheTiempo": 86400,
    //Nombre claim para obtener el usuario desde Identidad tipo "ClaimsIdentity"
    "ClaimUsuario": "preferred_username",
    //Tipo almacenamiento utilizado. Valores (Archivo,ElasticSearch)
    "AlmacenamientoTipo": "ElasticSearch",
    //Configuracion de la conexion, del almacenamiento auditoria. (Proveedor: ElasticSearch Conexion)
    "AlmacenamientoConexion": "http://172.31.3.43:9200",
    //Nombre grupo. Para agrupamiento de los registros auditoria en el almacenamiento. (Proveedor: ElasticSearch indice debe ser minusculas)
    "AlmacenamientoGrupo": "auditoria"
  },
  //Configuracion de redis para utilizar cache distribuido
  "Redis": {
    "Configuration": "172.31.3.44"
  },
  //Configuracion clientes para generacion token, consumir Servicios remotos
  "IdentityClients": {
    //Default, si no existe el nombre cliente especifico, se trabaja con el cliente default
    "Default": {
      //"client_credentials" or "password".
      "GrantType": "password",
      "ClientId": "MicroserviceComunication_App",
      "ClientSecret": "531b97e3-9c4c-4eec-9019-2356c5965be8",
      "UserName": "admin",
      "UserPassword": "1q2w3E*",
      "Authority": "http://172.31.3.40:85/",
      "Scope": "Base Notificacion",
      "RequireHttps": "false"
    }
  },
  //Configuracion para consumir servicios externos "remotos"
  "RemoteServices": {
    //Api configuracion auditoria.
    "AuditarConf": {
      "BaseUrl": "http://172.31.3.40:83/"
    },
    "Notificacion": {
      "BaseUrl": "http://172.31.3.40:81/"
    }
  },
  "Ldap": {
    //Configuracion de LDAP para busqueda de usuarios internos, para creacion
    "Servidor": "10.10.8.77",
    "Puerto": "389",
    "BaseDc": "OU=Usuarios,OU=Cancilleria,DC=mre,DC=corp",
    //Se utilizara para las operaciones cn={UsuarioBind},{BaseDc}
    "UsuarioBind": "Consultor1-tmp",
    "ClaveBind": "PFdggGi1Z0pZaFFS8u2m",
    //Establecer el filtro segun las configuraciones Ldap. 
    // {0} para reemplazar por el usuario que desea buscar
    //(&(objectClass=user)(userPrincipalName={0}))
    //(&(objectClass=user)(sAMAccountName={0}))
    //(&(uid={0}))
    "FiltroBuscarUsuarios": "(&(objectClass=user)(userPrincipalName={0}))",
    //uid
    //sAMAccountName
    //userPrincipalName
    "MapeoUsuario": "userPrincipalName",
    //Normalizar el nombre usuario, si parametro es un correo electronico,
    //quitar el dominio, para obtener unicamente el usuario para realizar la busqueda
    //establecer en true para aplicar la normalizacion
    "NormalizarNombreUsuario": "false"
  },
  "AuthServer": {
    "Authority": "http://172.31.3.40:85",
    //True-False: Activar-Desactivar la obligatoriedad de https para Authority
    "RequireHttpsMetadata": "false",
    //Audiencia que se requiere validar en token
    "Audience": "Base",
    //Configuracion openId para utilizarse en SwaggerUI
    "SwaggerClientId": "Base_Swagger",
    "SwaggerClientSecret": "da5d628f-77cc-4eae-a38f-6f9ec2978eb5",
    //Scopes. Lista Clave/Valor. Clave es igual scope. Valor texto que se visualiza en SwaggerUI
    "Scopes": {
      "Base": "Base API"
    }
  },
  //Configuracion Cache
  "Cache": {
    "KeyPrefix": "Base:",
    //Cache, que no se aplican el prefijo, para compartir con otro componente. (IdentityServer + Base)
    "ExcluirAplicarPrefijo": [ "Volo.Abp.SettingManagement.Setting" ]
  },
  //Configuracion eventos distribuidos. General
  "EventosDistribuidos": {
    //En milesegundos
    "IntervaloTiempo": 3000,
    "NumeroReintentos": 3
  },
  //Configuracion eventos distribuidos, utilizando kafka.
  "Kafka": {
    "Connections": {
      "Default": {
        "BootstrapServers": "172.31.3.44:9092",
        "SocketTimeoutMs": 60000
      }
    },
    "EventBus": {
      "GroupId": "Mre.Sb.Base",
      "TopicName": "Mre.Sb.Base"
    }
  },
  //Configuraciones Clave/Valor
  "Settings": {

  },
  //Configuracion encriptacion
  "StringEncryption": {
    //Texto para encriptacion/desencriptar
    "DefaultPassPhrase": "UYd/qP6?UM7dch~,'LbA"
  },
  //Configuraciones de logs
  "Serilog": {
    "Using": [
      "Serilog.Sinks.Console",
      "Serilog.Sinks.File",
      "Serilog.Sinks.Async",
      "Serilog.Sinks.Elasticsearch",
      "Serilog.Enrichers.Environment",
      "Mre.Sb.Logs"
    ],
    "MinimumLevel": {
      "Default": "Debug",
      "Override": {
        "Microsoft": "Information",
        "Microsoft.Hosting.Lifetime": "Information"
      }
    },
    "Enrich": [
      //https://github.com/serilog/serilog-enrichers-environment
      "WithMachineName",
      "WithEnvironmentName",
      "WithEnvironmentUserName",
      {
        "Name": "ConUsuario",
        "Args": {
          //Nombre claim, que se utiliza para obtener el usuario
          "usuarioClaim": "preferred_username",
          //Nombre campo, que se registra en los logs, el nombre del usuario
          "usuarioPropiedadNombre": "UserName"
        }
      }
    ],
    "WriteTo": [
      //{
      //  "Name": "Async",
      //  "Args": {
      //    "configure": [
      //      {
      //        "Name": "Console"
      //      }
      //    ]
      //  }
      //},
      {
        "Name": "Async",
        "Args": {
          "configure": [
            {
              "Name": "File",
              "Args": {
                "path": "logs/log-.txt",
                "rollingInterval": "Day",
                "retainedFileCountLimit": 30,
                "shared": true,
                "rollOnFileSizeLimit": true
                //"formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact"
              }
            }
          ]
        }
      },
      {
        "Name": "Elasticsearch",
        //Opciones: https://github.com/serilog-contrib/serilog-sinks-elasticsearch/wiki/Configure-the-sink
        "Args": {
          "nodeUris": "http://172.31.3.43:9200",
          "indexFormat": "logs_base_{0:yyyy.MM.dd}",
          "autoRegisterTemplate": true,
          "batchAction": "Create",
          //When true fields will be written at the root of the json document.
          "inlineFields": true
        }
      }
    ],
    "Properties": {
      "ApplicationName": "Base"
    }
  }
}